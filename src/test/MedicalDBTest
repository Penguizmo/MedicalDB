package com.medicaldb.test;

import com.medicaldb.util.DatabaseConnection;
import org.junit.jupiter.api.*;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;

import static org.junit.jupiter.api.Assertions.*;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class MedicalDBTest {

    private static Connection conn;

    @BeforeAll
    static void setupDatabaseConnection() {
        conn = DatabaseConnection.getConnection();
        assertNotNull(conn, "‚ùå Database connection failed!");
        System.out.println("‚úÖ Connected to database before tests.");
    }

    @Test
    @Order(1)
    @DisplayName("Test Case 1: Insert & Retrieve a New Doctor")
    public void testAddDoctor() throws SQLException {
        Statement stmt = conn.createStatement();

        // insert a new doctor into the database
        stmt.executeUpdate("INSERT INTO doctor (doctorid, firstname, surname, address, email) " +
                "VALUES (105, 'Alice', 'Cooper', '123 Main St', 'alice@email.com');");

        // verify the doctor exists
        ResultSet rs = stmt.executeQuery("SELECT * FROM doctor WHERE doctorid = 105;");
        assertTrue(rs.next(), "‚ùå Doctor was not added to the database!");
        System.out.println("‚úÖ Doctor inserted successfully!");
    }

    @Test
    @Order(2)
    @DisplayName("Test Case 2: Insert Doctor with Missing Email (Allow NULL)")
    public void testInsertDoctorWithMissingEmail() throws SQLException {
        Statement stmt = conn.createStatement();

        // insert doctor with NULL email
        stmt.executeUpdate("INSERT INTO doctor (doctorid, firstname, surname, address, email) " +
                "VALUES (106, 'Mark', 'Lee', '456 Elm St', NULL);");

        // verify insertion
        ResultSet rs = stmt.executeQuery("SELECT * FROM doctor WHERE doctorid = 106;");
        assertTrue(rs.next(), "‚ùå Doctor was not added despite NULL email being allowed.");
        System.out.println("‚úÖ Doctor added successfully, NULL email is accepted.");
    }

    @Test
    @Order(3)
    @DisplayName("Test Case 3: Insert Duplicate Primary Key")
    public void testDuplicatePrimaryKey() throws SQLException {
        Statement stmt = conn.createStatement();

        // insert duplicate doctorid
        try {
            stmt.executeUpdate("INSERT INTO doctor (doctorid, firstname, surname, address, email) " +
                    "VALUES (105, 'Bob', 'Jones', '789 Oak St', 'bob@email.com');");
            fail("‚ùå Expected an error due to duplicate primary key!");
        } catch (SQLException e) {
            System.out.println("‚úÖ Error detected for duplicate primary key: " + e.getMessage());
        }
    }

    @Test
    @Order(4)
    @DisplayName("Test Case 4: Retrieve All Doctors")
    public void testRetrieveDoctors() throws SQLException {
        Statement stmt = conn.createStatement();

        // select all doctors
        ResultSet rs = stmt.executeQuery("SELECT * FROM doctor;");
        assertTrue(rs.next(), "‚ùå No doctors found in the database!");
        System.out.println("‚úÖ Doctors retrieved successfully!");
    }

    @Test
    @Order(5)
    @DisplayName("Test Case 5: Delete Doctor")
    public void testDeleteDoctor() throws SQLException {
        Statement stmt = conn.createStatement();

        // delete a doctor
        stmt.executeUpdate("DELETE FROM doctor WHERE doctorid = 105;");

        // verify deletion
        ResultSet rs = stmt.executeQuery("SELECT * FROM doctor WHERE doctorid = 105;");
        assertFalse(rs.next(), "‚ùå Doctor was not deleted.");
        System.out.println("‚úÖ Doctor deleted successfully.");
    }

    @AfterAll
    public static void tearDownDatabaseConnection() throws SQLException {
        conn.close();
        System.out.println("üî¥ Database connection closed after tests.");
    }
}